/* Created on 15.12.2024 */
package org.javerland.jdbcsheets;

import java.io.File;
import java.sql.*;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.UUID;

/**
 * @author juraj.pacolt
 */
class JdbcSheetsStatement implements Statement {

    private final JdbcSheetsConnection connection;
    private final File file;
    private final String id;
    private Map<String, JdbcSheetsResultSet> resultSetMap = new LinkedHashMap<>();

    public JdbcSheetsStatement(JdbcSheetsConnection connection, File file) {
        this.connection = connection;
        this.file = file;
        this.id = UUID.randomUUID().toString();
    }

    public String getId() {
        return id;
    }

    protected File getFile() {
        return file;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        JdbcSheetsResultSet rs = new JdbcSheetsResultSet(connection, this, sql);
        resultSetMap.put(rs.getId(), rs);
        return rs;
    }

    protected void closeResultSet(String resultSetId) {
        resultSetMap.remove(resultSetId);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return 0;
    }

    @Override
    public void close() throws SQLException {
        for (JdbcSheetsResultSet rs : resultSetMap.values()) {
            rs.close();
        }
        resultSetMap.clear();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        // ignore
    }

    @Override
    public int getMaxRows() throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        // ignore
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        // ignore
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        // ignore
    }

    @Override
    public void cancel() throws SQLException {
        // ignore
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        // ignore
        return null;
    }

    @Override
    public void clearWarnings() throws SQLException {
        // ignore
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        // ignore
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        // TODO ...
        return false;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return resultSetMap.get(resultSetMap.size() - 1);
    }

    @Override
    public int getUpdateCount() throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return resultSetMap.size() > 0;
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        // ignore
    }

    @Override
    public int getFetchDirection() throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        // ignore
    }

    @Override
    public int getFetchSize() throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public int getResultSetType() throws SQLException {
        return 0;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        // ignore
    }

    @Override
    public void clearBatch() throws SQLException {
        // ignore
    }

    @Override
    public int[] executeBatch() throws SQLException {
        // ignore
        return new int[0];
    }

    @Override
    public Connection getConnection() throws SQLException {
        return connection;
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        // ignore
        return false;
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        // ignore
        return null;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        // ignore
        return false;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        // ignore
        return false;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        // ignore
        return false;
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        // ignore
        return 0;
    }

    @Override
    public boolean isClosed() throws SQLException {
        return resultSetMap.size() == 0;
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        // ignore
    }

    @Override
    public boolean isPoolable() throws SQLException {
        // ignore
        return false;
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        // ignore
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        // ignore
        return false;
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        // TODO ...
        return null;
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        // TODO ...
        return false;
    }
}
